name: Terraform apply w/ manual approval

on:
  push:
      branches: ["main"]
      paths: [
        "terraform/**",
        "!terraform/modules/terraform-ci-cd/**"
      ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


env:
  TFVARS_FILE_NAME: prod.tfvars
  TERRAFORM_FILE_NAME: terraform.tf
  TFPLAN_FILE_NAME: plan.tfplan
  TERRAFORM_FOLDER_PATH: ${{ github.workspace }}/terraform


permissions:
  issues: write
  contents: read
  id-token: write

jobs:
  create-terraform-infrastructure:
    uses: ./.github/workflows/terraform-update-infrastructure.yml

    secrets: inherit


  get-output-and-update-repo-secrets:
    timeout-minutes: 10

    needs: [ create-terraform-infrastructure ]

    runs-on: ubuntu-latest

    outputs:
      visitorcounter_endpoint_need_update: ${{ steps.terraformOutput.outputs.visitorcounter_endpoint_need_update }}
      frontend_s3_need_upload: ${{ steps.terraformOutput.outputs.frontend_s3_need_upload }}
      visitorcounter_lambda_need_upload: ${{ steps.terraformOutput.outputs.visitorcounter_lambda_need_upload }}
      slack_integration_lambda_need_upload: ${{ steps.terraformOutput.outputs.slack_integration_lambda_need_upload }}
      new_aws_role_arn: ${{ steps.terraformOutput.outputs.new_aws_role_arn }}
      new_s3_bucket_name: ${{ steps.terraformOutput.outputs.new_s3_bucket_name }}
      new_cloudfront_distribution_id: ${{ steps.terraformOutput.outputs.new_cloudfront_distribution_id }}
      new_slack_integration_lambda_arn: ${{ steps.terraformOutput.outputs.new_slack_integration_lambda_arn }}
      new_visitor_counter_lambda_arn: ${{ steps.terraformOutput.outputs.new_visitor_counter_lambda_arn }}

    steps:
      - name: Install Terraform CLI
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.MANUAL_TF_API_TOKEN }}

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download tfvars artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.TFVARS_FILE_NAME }}
          path: ${{ env.TERRAFORM_FOLDER_PATH }}

      - name: Download terraform provider artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.TERRAFORM_FILE_NAME }}
          path: ${{ env.TERRAFORM_FOLDER_PATH }}
      
      - name: Get Terraform outputs
        id: terraformOutput
        
        env:
          GH_TOKEN: ${{ secrets.MANUAL_GITHUB_PERSONAL_ACCESS_TOKEN }}

        run: |
          cd ${{ env.TERRAFORM_FOLDER_PATH }}

          terraform init

          cfn_new_distro_id=$(terraform output -raw cloudfront_distribution_id)
          
          if [ "$cfn_new_distro_id" != "${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }}" ];
          then
            echo Updating CloudFront distribution ID...
            gh secret set AWS_CLOUDFRONT_DISTRIBUTION_ID --body "$cfn_new_distro_id"
          fi

          cfn_new_distro_id=$(echo -n $cfn_new_distro_id | gpg --symmetric --quiet --batch --passphrase ${{ secrets.MANUAL_GITHUB_GPG_PASSWORD }} --output - | base64 -w 0)
          
          echo "new_cloudfront_distribution_id=$cfn_new_distro_id" >> "$GITHUB_OUTPUT"
          
          
          ghactions_aws_role_arn=$(terraform output -raw ghactions_aws_role_arn)

          if [ "$ghactions_aws_role_arn" != "${{ secrets.AWS_GITHUB_ROLE_ARN }}" ];
          then
            echo Updating ARN of role for GitHub Actions...
            
            gh secret set AWS_GITHUB_ROLE_ARN --body "$ghactions_aws_role_arn"
          fi

          ghactions_aws_role_arn=$(echo -n $ghactions_aws_role_arn | gpg --symmetric --quiet --batch --passphrase ${{ secrets.MANUAL_GITHUB_GPG_PASSWORD }} --output - | base64 -w 0)
          
          echo "new_aws_role_arn=$ghactions_aws_role_arn" >> "$GITHUB_OUTPUT"
          
          

          s3_frontend_bucket_name=$(terraform output -raw s3_frontend_bucket_name)
          frontend_s3_need_upload="false"

          if [ "$s3_frontend_bucket_name" != "${{ secrets.AWS_S3_BUCKET_NAME }}" ];
          then
            echo Updating front end s3 bucket name and uploads files...
          
            gh secret set AWS_S3_BUCKET_NAME --body "$s3_frontend_bucket_name"
            
            frontend_s3_need_upload="true"
          fi

          s3_frontend_bucket_name=$(echo -n $s3_frontend_bucket_name | gpg --symmetric --quiet --batch --passphrase ${{ secrets.MANUAL_GITHUB_GPG_PASSWORD }} --output - | base64 -w 0)
          
          echo "new_s3_bucket_name=$s3_frontend_bucket_name" >> "$GITHUB_OUTPUT"

          

          echo GH CLI of variable value before:
          gh variable get VISITOR_COUNTER_API_INVOKE_URL
          
          new_endpoint_url=$(terraform output -raw visitor_counter-api_invoke_url)
          visitorcounter_endpoint_need_update="false"
          
          if [ "$new_endpoint_url" != "${{ vars.VISITOR_COUNTER_API_INVOKE_URL }}" ];
          then
            echo values different, updating environment variable 
            echo "new endpoint id is $new_endpoint_url"
            
            gh variable set VISITOR_COUNTER_API_INVOKE_URL --body "$new_endpoint_url" 
            
            echo GH CLI of variable value after:
            gh variable get VISITOR_COUNTER_API_INVOKE_URL
            
            visitorcounter_endpoint_need_update="true"
          fi
            
            
          echo "frontend_s3_need_upload=$frontend_s3_need_upload" >> "$GITHUB_OUTPUT"
          echo "visitorcounter_endpoint_need_update=$visitorcounter_endpoint_need_update" >> "$GITHUB_OUTPUT"
              
          if [ "$frontend_s3_need_upload" = "true" ]; then
            echo Frontend S3 needs upload
          fi

          if [ "$visitorcounter_endpoint_need_update" = "true" ]; then
            echo visitor counter endpoint need update
          fi

          slack_integration_lambda_need_upload="false"
          slack_integration_lambda_arn=$(terraform output -raw slack_integration-lambda_arn)
          if [ "$slack_integration_lambda_arn" != "${{ secrets.AWS_SLACK_INTEGRATION_LAMBDA_ARN }}" ];
          then
            echo Updating ARN of Lambda for Slack integration...
            gh secret set AWS_SLACK_INTEGRATION_LAMBDA_ARN --body "$slack_integration_lambda_arn"

            slack_integration_lambda_need_upload="true"
            
            echo "slack_integration_lambda_need_upload=$slack_integration_lambda_need_upload" >> "$GITHUB_OUTPUT"
          fi

          slack_integration_lambda_arn=$(echo -n $slack_integration_lambda_arn | gpg --symmetric --quiet --batch --passphrase ${{ secrets.MANUAL_GITHUB_GPG_PASSWORD }} --output - | base64 -w 0)
          echo "new_slack_integration_lambda_arn=$slack_integration_lambda_arn" >> "$GITHUB_OUTPUT"

          visitorcounter_lambda_need_upload="false"
          visitor_counter_lambda_arn=$(terraform output -raw visitor_counter-lambda_arn)
          if [ "$visitor_counter_lambda_arn" != "${{ secrets.AWS_VISITOR_COUNTER_LAMBDA_ARN }}" ];
          then
            echo Updating ARN of Lambda for Slack integration...
            gh secret set AWS_VISITOR_COUNTER_LAMBDA_ARN --body "$visitor_counter_lambda_arn"

            visitorcounter_lambda_need_upload="true"
            
            echo "visitorcounter_lambda_need_upload=$visitorcounter_lambda_need_upload" >> "$GITHUB_OUTPUT"
          fi

          visitor_counter_lambda_arn=$(echo -n $visitor_counter_lambda_arn | gpg --symmetric --quiet --batch --passphrase ${{ secrets.MANUAL_GITHUB_GPG_PASSWORD }} --output - | base64 -w 0)
          echo "new_visitor_counter_lambda_arn=$visitor_counter_lambda_arn" >> "$GITHUB_OUTPUT"

          if [ "$slack_integration_lambda_need_upload" = "true" ]; then
            echo slack integration lambda need upload
          fi

          if [ "$visitorcounter_lambda_need_upload" = "true" ]; then
            echo visitor counter lambda need upload
          fi



  upload_to_frontend_s3_bucket:
    needs: [ get-output-and-update-repo-secrets ]

    if: ${{ (needs.get-output-and-update-repo-secrets.outputs.visitorcounter_endpoint_need_update == 'true' ) || (needs.get-output-and-update-repo-secrets.outputs.frontend_s3_need_upload == 'true')}}

    uses: ./.github/workflows/deploy-site-to-s3.yml

    with:
      AWS_ROLE_ARN: ${{ needs.get-output-and-update-repo-secrets.outputs.new_aws_role_arn }}
      S3_BUCKET_NAME: ${{ needs.get-output-and-update-repo-secrets.outputs.new_s3_bucket_name }}
      CLOUDFRONT_DISTRIBUTION_ID: ${{ needs.get-output-and-update-repo-secrets.outputs.new_cloudfront_distribution_id }}

    secrets: inherit


  upload_visitorcounter_lambda:
    needs: [ get-output-and-update-repo-secrets ]

    if: ${{ needs.get-output-and-update-repo-secrets.outputs.visitorcounter_lambda_need_upload == 'true' }}

    uses: ./.github/workflows/publish-visitorcounter_lambda.yml

    with:
      AWS_ROLE_ARN: ${{ needs.get-output-and-update-repo-secrets.outputs.new_aws_role_arn }}
      VISITORCOUNTER_LAMBDA_ARN: ${{ needs.get-output-and-update-repo-secrets.outputs.new_visitor_counter_lambda_arn }}

    secrets: inherit


    
  upload_slack_integration_lambda:
    needs: [ get-output-and-update-repo-secrets ]

    if: ${{ needs.get-output-and-update-repo-secrets.outputs.slack_integration_lambda_need_upload == 'true' }}

    uses: ./.github/workflows/publish-slack_integration_lambda.yml

    with:
      AWS_ROLE_ARN: ${{ needs.get-output-and-update-repo-secrets.outputs.new_aws_role_arn }}
      SLACK_INTEGRATION_LAMBDA_ARN: ${{ needs.get-output-and-update-repo-secrets.outputs.new_slack_integration_lambda_arn }}
    
    secrets: inherit