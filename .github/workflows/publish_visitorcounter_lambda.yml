name: Deploy Lambda for visitor counter to AWS

on:
    push:
        branches: ["main", "lambda-unittest"]
        paths: ["back_end/**"]

    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  test-lambda-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: check out repo
        uses: actions/checkout@v3

      - name: create default aws config for unittest
        run: |
          mkdir ~/.aws
          touch ~/.aws/config
          echo "[default]" >> ~/.aws/config
          echo "aws_access_key_id=test" >> ~/.aws/config
          echo "aws_secret_access_key=test" >> ~/.aws/config

      - name: install python dependencies
        run: |
          pip3 install -r requirements.txt

      - name: run Python unittest
        run: |
          python3 -m unittest

      - name: remove AWS default config used for testing
        run: |
          rm ~/.aws/config


      - name: get temporary AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_STACK_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }} 
          role-session-name: GHASession-anthony_cloud_resume
          unset-current-credentials: true
          retry-max-attempts: 3
          output-credentials: true
    
            
      - name: verify temp credentials validity
        run: |
          aws sts get-caller-identity


      - name: package lambda code for AWS
        run: |
          echo package code for aws
          cd ./back_end
          mkdir package
          pip install --target ./package boto3
          cd package
          zip -r ../${{ vars.LAMBDA_DEPLOYMENT_ZIPPACKAGE_NAME }} .
          cd ..
          zip ${{ vars.LAMBDA_DEPLOYMENT_ZIPPACKAGE_NAME }} *.py


      - name: deploy lambda package to s3
        run: |
          echo deploy package to s3
          cd ./back_end
          aws s3 cp ${{ vars.LAMBDA_DEPLOYMENT_ZIPPACKAGE_NAME }} s3://${{ secrets.S3_LAMBDA_BUCKET_NAME }}/
          

      - name: get and publish new version of package to Lambda
        run: |
          echo publish new version to lambda

          lambda_new_version=$(aws s3api list-object-versions \
                                          --bucket ${{ secrets.S3_LAMBDA_BUCKET_NAME }} \
                                          --prefix ${{ vars.LAMBDA_DEPLOYMENT_ZIPPACKAGE_NAME }} \
                                          --query 'Versions[?IsLatest].[VersionId]' \
                                          --output text)

          aws lambda update-function-code \
                      --function-name ${{ secrets.LAMBDA_FUNCTION_ARN }} \
                      --region ${{ secrets.AWS_STACK_REGION }} \
                      --s3-bucket ${{ secrets.S3_LAMBDA_BUCKET_NAME }} \
                      --s3-key ${{ vars.LAMBDA_DEPLOYMENT_ZIPPACKAGE_NAME }} \
                      --s3-object-version $lambda_new_version

          

          
